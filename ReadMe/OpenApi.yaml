openapi: "3.0.2"
info:
  title: "Rental Cars API"
  description: "A service providing operations for users and admins in the context of car rentals."
  version: "0.0.1"
  contact:
    email: "danilshkoda1998@gmail.com"
servers:
  - url: "http://localhost:5500"
    description: "Development Server"

paths:
  /signUp:
    post:
      summary: "Register a new user and obtain a JSON Web Token (JWT)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/BodyObjectSignUp"
      tags:
        - user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example:
                message: "User was successfully created."
        '400':
          description: Bad Request, invalid data. Please review the property values.
          content:
            application/json:
              examples:
                example1:
                  summary: Invalid data
                  value:
                    error: "Invalid value: password or another property"
                example2:
                  summary: User already exists
                  value:
                    error: "User already exists"
  /login:
    post:
      summary: Login a user and obtain a JSON Web Token (JWT) 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  maxLength: 32
                  minLength: 10
                  example: "qwerty12345"
                email:
                  type: string
                  format: email
                  example: "vasyapupkin@gmail.com"
              required:
                - email
                - password
      tags:
        - user
      responses:
        '200':
          description: User login successfully
          content:
            application/json:
              example:
                message: "You logged on into the account. JWT received."
        '400':
          description: Bad Request, invalid data or email is wrong.
          content:
            application/json:
              examples:
                example1:
                  summary: Invalid data
                  value:
                    error: "Password is wrong"
                example2:
                  summary: User does not exist
                  value:
                    error: "User does not exist"
  /createAdmin:
    post:
      summary: Create an admin (accessible only for SuperAdmin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyObjectSignUp"
      security:
        - JWT: []
      tags:
        - user
      responses:
        '201':
          description: Admin created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseObjectCreateAdmin"
        '400':
          description: Bad Request, invalid data. Please review the property values.
          content:
            application/json:
              examples:
                example1:
                  summary: Invalid data
                  value:
                    error: "Invalid value: password or another property"
                example2:
                  summary: Admin already exists
                  value:
                    error: "Admin already exists"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /deletedUser:
    delete:
      summary: "Admin can delet a user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/DeleteUser"
      security:
        - JWT: []
      responses:
        '200':
          description: User was  deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  "user's email":
                    type: string
                    example: "was deleted"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /getAllUsers:
    get:
      summary: "Get all users only admin"
      tags:
        - user
      security:
        - JWT: []
      responses:
        '200':
          description: admin get all users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetALLUsers"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/CreateAuto:
    post:
      summary: Create new auto only admin 
      security:
        - JWT: []
      tags:
        - car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestObjectCreateAuto"
      responses:
        '201':
          description: Auto created successfully
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/ResponseObjectCreateAuto"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/DeleteAuto:
    delete:
      summary: "Admin can sofr delet a car"
      description: "When the car is deleted, it remains in the table."
      tags:
        - car
      parameters:
        - $ref: "#/components/parameters/DeleteCar"
      security:
        - JWT: []
      responses:
        '200':
          description: Car was  deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  car:
                    type: object
                
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "enter the machine number"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/RentalCars:
    get:
      summary: The admin can view the list of cars currently in rental.
      tags:
        - car
      security:
          - JWT: []
      responses:
        '200':
          description: Admin retrieves a list of all cars currently in rental.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auto:
                    type: array
                    items:
                      $ref: "#/components/schemas/RequestObjectCreateAuto"
        '401':
          description: "verefication was unsuccessful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/FilterCars:
    get:
      summary: "Both an admin and a user can filter cars based on brand, model, price, year, or any combination of these criteria, excluding those currently in rental."
      tags:
        - car
      parameters:
        - $ref: "#/components/parameters/FilterCarBrand"
        - $ref: "#/components/parameters/FilterCarbrandModel"
        - $ref: "#/components/parameters/FilterCarbrandYear"
        - $ref: "#/components/parameters/FilterCarbrandCoulor"
      security:
        - JWT: []
      responses:
        '200':
          description: Seadch successful
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      auto:
                        type: array
                        items:
                          $ref: "#/components/schemas/RequestObjectCreateAuto"
        '400':
          description: Filtering unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Enter some data"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/includeLetters:
    get:
      summary: "Substring"
      description: The user has the ability to perform a quick search by the name and brand. For example, if the user enters 'su,' it should return all cars where the name or brand contains such a substring (Subaru, Suzuki, Toyota Suburban, etc.),excluding those currently in rental.
      tags:
        - car
      parameters:
        - $ref: "#/components/parameters/FilterCarBrand"
        - $ref: "#/components/parameters/FilterCarbrandModel"
      security:
        - JWT: []
      responses:
        '200':
          description: Seadch successful
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      auto:
                        type: array
                        items:
                          $ref: "#/components/schemas/RequestObjectCreateAuto"
        '400':
          description: Filtering unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Enter some data"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/getAllCars:
    get:
      summary: "Get all cars"
      tags:
        - car
      security:
        - JWT: []
      responses:
        '200':
          description:  get all carss
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestObjectCreateAuto"
        '401':
          description: verefication was unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /car/return:
    put:
      summary: "Only an admin can process the return of the car."
      description: "When a car is returned, update the data in the table regarding its status, indicating whether it is in rental or not. The lease information, along with the actual time finished, is moved to another table, 'Archive_lease,' and is removed from the 'Rentals' table"
      tags:
        - car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                number:
                  type: string
                  example: Ax2212
                endTime:
                  type: string
                  format: date-time
                  example: 2024-07-10 10:30:00
      responses:
        '200':
          description: A Return successfully
          content:
            application/json:
              example:
                message: 'The car has been returned'
        '400':
          description: Bad Request, invalid data or email is wrong.
          content:
            application/json:
              examples:
                example1:
                  summary: Invalid data_1
                  value:
                    error: "Failed to return car: No rental found for this car number"
                example2:
                  summary: Invalid data_2
                  value:
                    error: "enter the data"
  /car/rent:
    post:
      summary: The user can lease a car. 
      description: The user can only have one car on lease at a time.f the car is already rented, the user cannot lease another car.
      tags:
        - car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                number:
                  type: string
                  example: Ax2212
                startTime:
                  type: string
                  format: date-time
                  example: 2024-07-10 10:30:00
                endTime:
                  type: string
                  format: date-time
                  example: 2024-08-11 10:30:00
      responses:
        '200':
          description: A Return successfully
          content:
            application/json:
              example:
                message: 'The car has been returned'
        '400':
          description: Bad Request, invalid data or email is wrong.
          content:
            application/json:
              examples:
                example1:
                  summary: Invalid data_1
                  value:
                    error: "you can not have two cars in rental"
                example2:
                  summary: Invalid data_2
                  value:
                    error: "you rented"  
                example3:
                  summary: Invalid data_3
                  value:
                    error: "you can not have two cars in rental"
                    
components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization
      description: format JWT
      
  parameters:
    DeleteUser:
     name: email
     in: query
     description: "user's email"
     required: true
     schema:
      type: string
    DeleteCar:
      name: Number
      in: query
      description: "car's number"
      required: true
      schema:
        type: string
    FilterCarBrand:
      in: query
      name: brand
      description: Бренд автомобиля
      schema:
        type: string
    FilterCarbrandModel:
      in: query
      name: model
      description: Модель автомобиля
      schema:
        type: string
    FilterCarbrandYear:
      in: query
      name: year
      description: Год выпуска автомобиля
      schema:
        type: integer
    FilterCarbrandCoulor:
      in: query
      name: color
      description: Цвет автомобиля
      schema:
        type: string
   
  schemas:
    ResponseObjectCreateAdmin:
      type: object
      properties:
        message:  # Добавлен ключ "message" для объекта
          type: object
          properties:
            name:
              type: string
              maxLength: 32
              minLength: 4
              example: "Vasya"
            lastName:
              type: string
              maxLength: 32
              minLength: 4
              example: "Pupkin"
            role:
              type: string
              enum:
                - admin
            email:
              type: string
              format: email
              example: "vasyapupkin@gmail.com"          
    BodyObjectSignUp:
      type: object
      properties:
        name:
          type: string
          maxLength: 32
          minLength: 4
          example: "Vasya"
        lastName:
          type: string
          maxLength: 32
          minLength: 4
          example: "Pupkin"
        password:
          type: string
          maxLength: 32
          minLength: 10
          example: "qwerty12345"
        email:
          type: string
          format: email
          example: "vasyapupkin@gmail.com"
    GetALLUsers:
      type: object
      properties:
        id_users:
          type: integer
          description: "User ID"
        name:
          type: string
          description: "User's first name"
        lastName:
          type: string
          description: "User's last name"
        email:
          type: string
          format: email
          description: "User's email address"
        role:
          type: string
          description: "User's role"
        is_deleted:
          type: integer
          description: "Indicator if the user is deleted or not"
      example:
        id_users: 2
        name: "Kseniya"
        lastName: "Kaplya"
        email: "kseniyaKaplya@gmail.com"
        role: "user"
        is_deleted: 0
    RequestObjectCreateAuto:
      type: object
      properties:
        Brand:
          type: string
          maxLength: 20
          minLength: 2
          example: "BMW"
        Model:
          type: string
          maxLength: 20
          minLength: 2
          example: "m5"
        Number:
          type: string
          maxLength: 20
          minLength: 2
          example: AX1337
        Price:
          type: integer
          maxLength: 5
          minLength: 2
          example: 1500
        Year:
          type: integer
          maxLength: 4
          minLength: 4
          example: 2020
    ResponseObjectCreateAuto:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Car was created"
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: "verefication was unsuccessful"

          
          
              

  